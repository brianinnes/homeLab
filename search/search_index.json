{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This site will walk you through how to create your own home or office Lab environment, enabling you to explore Red Hat OpenShift, using oVirt and OKD.","title":"Home"},{"location":"overview/","text":"Overview \u00b6 Getting skills in Cloud Native Development and maintaining those skills can be challenging for a developer. The technology is evolving very quickly, so having an environment where a developer can update, explore and learn new features as they emerge is a valuable resource. Managed cloud based environments are usually a shared resource across a development team, where it is not appropriate to upgrade to the latest emerging technology. as the development environment needs to be a managed, stable environment. Costs can also be an inhibitor to allow developers to have the environments they want to explore and keep up to date, especially when doing so at home. This project documents my cloud native development home lab. I wanted to only use freely available open source technology, but also technology where there is a route into a production environment. Although the project doesn't use any managed cloud resources, it does require a certain amount of hardware - which may not be appropriate for all developers. I purchased a reconditioned workstation with a large amount of memory and Intel Xeon processors, to have sufficient hardware resources to run a cloud environment. This environment will not run on a typical home computer. This project is based on 2 open source projects : oVirt - which is an upstream community run project contributing in to Red Hat Virtualization OKD - which is a community run sibling project to Red Hat OpenShift , taking the same source code as a starting point, then applying some customisations to create the deliverables. oVirt \u00b6 oVirt is an open-source virtualization solution based on the KVM hypervisor. It offers an open-source solution similar to the enterprise products from VMWare, to run a distributed, virtualization solution. In this projects, for a home lab only a single oVirt instance will be used. OKD \u00b6 OKD is an open-source distribution of Kubernetes, that delivers enhanced capabilities over a standard Kubernetes platform. With additional security features and an integrated user interface with both admin and developer features.","title":"Overview"},{"location":"overview/#overview","text":"Getting skills in Cloud Native Development and maintaining those skills can be challenging for a developer. The technology is evolving very quickly, so having an environment where a developer can update, explore and learn new features as they emerge is a valuable resource. Managed cloud based environments are usually a shared resource across a development team, where it is not appropriate to upgrade to the latest emerging technology. as the development environment needs to be a managed, stable environment. Costs can also be an inhibitor to allow developers to have the environments they want to explore and keep up to date, especially when doing so at home. This project documents my cloud native development home lab. I wanted to only use freely available open source technology, but also technology where there is a route into a production environment. Although the project doesn't use any managed cloud resources, it does require a certain amount of hardware - which may not be appropriate for all developers. I purchased a reconditioned workstation with a large amount of memory and Intel Xeon processors, to have sufficient hardware resources to run a cloud environment. This environment will not run on a typical home computer. This project is based on 2 open source projects : oVirt - which is an upstream community run project contributing in to Red Hat Virtualization OKD - which is a community run sibling project to Red Hat OpenShift , taking the same source code as a starting point, then applying some customisations to create the deliverables.","title":"Overview"},{"location":"overview/#ovirt","text":"oVirt is an open-source virtualization solution based on the KVM hypervisor. It offers an open-source solution similar to the enterprise products from VMWare, to run a distributed, virtualization solution. In this projects, for a home lab only a single oVirt instance will be used.","title":"oVirt"},{"location":"overview/#okd","text":"OKD is an open-source distribution of Kubernetes, that delivers enhanced capabilities over a standard Kubernetes platform. With additional security features and an integrated user interface with both admin and developer features.","title":"OKD"},{"location":"ovirt/","text":"oVirt installation and setup \u00b6 Install oVirt node \u00b6 download ISO flash to USB memory stick Boot from memory stick Run oVirt setup wizard \u00b6 Select language from the list then press the Continue button Select the keyboard layout then press the Done key Enter the Installation Destination section you need to keep a disk or partition free for Gluster to use (this was discussed in the preparation section) Enter a root password Set the TimeZone Enter the Network and Host name section select Configure to configure the network interface In the IPv4 tab select Manual configuration then select Add to enter the configuration - this should match what is in your DNS configuration. Press Save to store the IP configuration Click the toggle switch to enable the Ethernet interface Select Done to complete the network configuration (optional) If you want to configure NTP time synchronisation, revisit the Time & Date section and configure the NTP server to a local server then enable NTP Select Begin Installation to start the installation Wait for installation to complete then select to reboot when selected (ensure the USB memory stick is removed so it doesn't boot from the install media) You can now interact with the installed system using the web based cockpit UI. On your laptop or a workstation on the network, navigate to https://<host address>:9090 . Where the host address is the address you added in DNS for the IP address you manually configured in step 6 above. Setup ssh keys \u00b6 During the install the ansible scripts need to be able to execute commands on the host. To do this it uses passwordless ssh. Even though we are only using a single host, the scripts are written to work across multiple hosts, so we need to enable passwordless ssh. You need to know your host IP address to substitute into ssh-copy-id command. You can find your host address using command hostname -I Enter the following commands using the terminal section of the cockpit web console ( http://<host-address>:9090 ) for the oVirt host. Substitute your host address in the copy command, accept all defaults and leave the passphrase blank: ssh-keygen ssh-copy-id root@<host-address> you will be prompted to confirm the connection, answer yes then you will be prompted for the root password, which you entered in step 4 of the previous section. Configure LVM filter \u00b6 By default Logical Volumes are configured to specific devices, so you need to add the device you want to use for the Gluster storage. Using the terminal section in the cockpit web ui, edit file /etc/lvm/lvm.conf and search for a line the starts filter = , not lines starting with # are comments. Modify the line to include your chosen device for the gluster volumes, eg. If the filter is currently set to filter = [\"a|^/dev/disk/by-id/lvm-pv-uuid-U77HZ9-LPry-OOMY-bgOq-t34w-l3av-srg8tU$|\", \"r|.*|\"] and your chosen device is /dev/sdb , then the filter line needs to be modified to: filter = [\"a|^/dev/disk/by-id/lvm-pv-uuid-U77HZ9-LPry-OOMY-bgOq-t34w-l3av-srg8tU$|\", \"a|^/dev/sdb|\", \"r|.*|\"] Save the modified lvm.conf file Setup the hyperconverged oVirt Hosted Engine and Gluster storage \u00b6 The hyperconverged Hosted Engine and Gluster storage can be installed using the cockpit web console ( http://<host-address>:9090 ). In the Cockpit UI navigate to the Virtualization section in the side menu, then select the Hosted Engine section. Select the start button under Hyperconverged. Select the Run Gluster Wizard for Single Node option to start the install. Enter the Fully qualified hostname for the oVirt cluster (this should be the name of the oVirt node that was used during the ssh-copy-id command) You can leave the Packages options as default You can leave the Volumes options as default In the Bricks options, set the device to the device you have available for the gluster storage. This could be an entire disk (e.g. /dev/sdb), or an available disk partition (/dev/sda3) In the review section edit the summary and remove the line - 5900/tcp , as this will cause the scripts to fail. Save the script Select the Deploy button to start the Gluster Storage installation If all works you should see the screen confirming the Gluster installation was successful You can now select the Continue to Hosted Engine Deployment button to install the Hosted Engine. Install Hosted Engine \u00b6 Before continuing, right click on the Networking item in the side menu and open a new browser window or tab. The firewall ports need to be modified before running the Hosted Engine installation, otherwise the installation will fail. Modify the firewall rules \u00b6 The Hosted Engine will try to add port 6900 to the public zone and will fail as the vdsm service includes that port, so the vdsm service and an additional port range needs to be modified to remove port 6900 Click to Edit rules and zones In the Public zone section open the vdsm item and press the delete button Select the Add Service button within the public zone to Create a new service. Select to use custom ports then enter TCP ports 54321, 5900-6899, 6901-6923, 49152-49216 . Call it custom-vdsm Switch to the terminal section and edit the file /etc/firewalld/zones/public.xml to have the following content: <zone> <short> Public </short> <description> For use in public areas. You do not trust the other computers on networks to not harm your computer. Only selected incoming connections are accepted. </description> <service name= \"ssh\" /> <service name= \"dhcpv6-client\" /> <service name= \"cockpit\" /> <service name= \"libvirt\" /> <service name= \"libvirt-tls\" /> <service name= \"glusterfs\" /> <service name= \"custom-vdsm\" /> <port port= \"2049\" protocol= \"tcp\" /> <port port= \"54321\" protocol= \"tcp\" /> <port port= \"5900-6899\" protocol= \"tcp\" /> <port port= \"6901-6923\" protocol= \"tcp\" /> <port port= \"5666\" protocol= \"tcp\" /> <port port= \"16514\" protocol= \"tcp\" /> </zone> You can see the port range 5900-6923 has been split into 2 ranges avoiding port 6900 5. run command systemctl restart firewalld to make the new firewall configuration live close the browser window and return to the browser window waiting to install the Hosted Engine Install the Hosted Engine \u00b6 In the VM Settings section enter: the fully qualified host name for the hosted engine switch to static Network Configuration and set the IP address to the value matching your hostname in your DNS, the gateway address and DNS server address enter the root password you want to set for the hosted engine operating system select Next to move to Engine section In the Engine section enter the admin password you want to set for the Engine, then select **Next to move to the next section Review the configuration information then press Prepare VM to deploy the Hosted Engine virtual machine in the Prepare VM section, this can take a while When the VM has been setup press Next to complete the setup In the storage section the settings should be pre-populated, so you can press Next then Finish Deployment","title":"oVirt setup"},{"location":"ovirt/#ovirt-installation-and-setup","text":"","title":"oVirt installation and setup"},{"location":"ovirt/#install-ovirt-node","text":"download ISO flash to USB memory stick Boot from memory stick","title":"Install oVirt node"},{"location":"ovirt/#run-ovirt-setup-wizard","text":"Select language from the list then press the Continue button Select the keyboard layout then press the Done key Enter the Installation Destination section you need to keep a disk or partition free for Gluster to use (this was discussed in the preparation section) Enter a root password Set the TimeZone Enter the Network and Host name section select Configure to configure the network interface In the IPv4 tab select Manual configuration then select Add to enter the configuration - this should match what is in your DNS configuration. Press Save to store the IP configuration Click the toggle switch to enable the Ethernet interface Select Done to complete the network configuration (optional) If you want to configure NTP time synchronisation, revisit the Time & Date section and configure the NTP server to a local server then enable NTP Select Begin Installation to start the installation Wait for installation to complete then select to reboot when selected (ensure the USB memory stick is removed so it doesn't boot from the install media) You can now interact with the installed system using the web based cockpit UI. On your laptop or a workstation on the network, navigate to https://<host address>:9090 . Where the host address is the address you added in DNS for the IP address you manually configured in step 6 above.","title":"Run oVirt setup wizard"},{"location":"ovirt/#setup-ssh-keys","text":"During the install the ansible scripts need to be able to execute commands on the host. To do this it uses passwordless ssh. Even though we are only using a single host, the scripts are written to work across multiple hosts, so we need to enable passwordless ssh. You need to know your host IP address to substitute into ssh-copy-id command. You can find your host address using command hostname -I Enter the following commands using the terminal section of the cockpit web console ( http://<host-address>:9090 ) for the oVirt host. Substitute your host address in the copy command, accept all defaults and leave the passphrase blank: ssh-keygen ssh-copy-id root@<host-address> you will be prompted to confirm the connection, answer yes then you will be prompted for the root password, which you entered in step 4 of the previous section.","title":"Setup ssh keys"},{"location":"ovirt/#configure-lvm-filter","text":"By default Logical Volumes are configured to specific devices, so you need to add the device you want to use for the Gluster storage. Using the terminal section in the cockpit web ui, edit file /etc/lvm/lvm.conf and search for a line the starts filter = , not lines starting with # are comments. Modify the line to include your chosen device for the gluster volumes, eg. If the filter is currently set to filter = [\"a|^/dev/disk/by-id/lvm-pv-uuid-U77HZ9-LPry-OOMY-bgOq-t34w-l3av-srg8tU$|\", \"r|.*|\"] and your chosen device is /dev/sdb , then the filter line needs to be modified to: filter = [\"a|^/dev/disk/by-id/lvm-pv-uuid-U77HZ9-LPry-OOMY-bgOq-t34w-l3av-srg8tU$|\", \"a|^/dev/sdb|\", \"r|.*|\"] Save the modified lvm.conf file","title":"Configure LVM filter"},{"location":"ovirt/#setup-the-hyperconverged-ovirt-hosted-engine-and-gluster-storage","text":"The hyperconverged Hosted Engine and Gluster storage can be installed using the cockpit web console ( http://<host-address>:9090 ). In the Cockpit UI navigate to the Virtualization section in the side menu, then select the Hosted Engine section. Select the start button under Hyperconverged. Select the Run Gluster Wizard for Single Node option to start the install. Enter the Fully qualified hostname for the oVirt cluster (this should be the name of the oVirt node that was used during the ssh-copy-id command) You can leave the Packages options as default You can leave the Volumes options as default In the Bricks options, set the device to the device you have available for the gluster storage. This could be an entire disk (e.g. /dev/sdb), or an available disk partition (/dev/sda3) In the review section edit the summary and remove the line - 5900/tcp , as this will cause the scripts to fail. Save the script Select the Deploy button to start the Gluster Storage installation If all works you should see the screen confirming the Gluster installation was successful You can now select the Continue to Hosted Engine Deployment button to install the Hosted Engine.","title":"Setup the hyperconverged oVirt Hosted Engine and Gluster storage"},{"location":"ovirt/#install-hosted-engine","text":"Before continuing, right click on the Networking item in the side menu and open a new browser window or tab. The firewall ports need to be modified before running the Hosted Engine installation, otherwise the installation will fail.","title":"Install Hosted Engine"},{"location":"ovirt/#modify-the-firewall-rules","text":"The Hosted Engine will try to add port 6900 to the public zone and will fail as the vdsm service includes that port, so the vdsm service and an additional port range needs to be modified to remove port 6900 Click to Edit rules and zones In the Public zone section open the vdsm item and press the delete button Select the Add Service button within the public zone to Create a new service. Select to use custom ports then enter TCP ports 54321, 5900-6899, 6901-6923, 49152-49216 . Call it custom-vdsm Switch to the terminal section and edit the file /etc/firewalld/zones/public.xml to have the following content: <zone> <short> Public </short> <description> For use in public areas. You do not trust the other computers on networks to not harm your computer. Only selected incoming connections are accepted. </description> <service name= \"ssh\" /> <service name= \"dhcpv6-client\" /> <service name= \"cockpit\" /> <service name= \"libvirt\" /> <service name= \"libvirt-tls\" /> <service name= \"glusterfs\" /> <service name= \"custom-vdsm\" /> <port port= \"2049\" protocol= \"tcp\" /> <port port= \"54321\" protocol= \"tcp\" /> <port port= \"5900-6899\" protocol= \"tcp\" /> <port port= \"6901-6923\" protocol= \"tcp\" /> <port port= \"5666\" protocol= \"tcp\" /> <port port= \"16514\" protocol= \"tcp\" /> </zone> You can see the port range 5900-6923 has been split into 2 ranges avoiding port 6900 5. run command systemctl restart firewalld to make the new firewall configuration live close the browser window and return to the browser window waiting to install the Hosted Engine","title":"Modify the firewall rules"},{"location":"ovirt/#install-the-hosted-engine","text":"In the VM Settings section enter: the fully qualified host name for the hosted engine switch to static Network Configuration and set the IP address to the value matching your hostname in your DNS, the gateway address and DNS server address enter the root password you want to set for the hosted engine operating system select Next to move to Engine section In the Engine section enter the admin password you want to set for the Engine, then select **Next to move to the next section Review the configuration information then press Prepare VM to deploy the Hosted Engine virtual machine in the Prepare VM section, this can take a while When the VM has been setup press Next to complete the setup In the storage section the settings should be pre-populated, so you can press Next then Finish Deployment","title":"Install the Hosted Engine"},{"location":"preparation/","text":"Getting ready for the installation \u00b6 Before starting to install oVirt, you need to ensure your storage and network is configured correctly. IP Addresses and DNS resolution needed oVirt host virtual Engine OKD Storage partition for Gluster split disk usage","title":"Preparing"},{"location":"preparation/#getting-ready-for-the-installation","text":"Before starting to install oVirt, you need to ensure your storage and network is configured correctly. IP Addresses and DNS resolution needed oVirt host virtual Engine OKD Storage partition for Gluster split disk usage","title":"Getting ready for the installation"}]}