{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home Lab","text":"<p>This site will walk you through how to create your own home or office Lab environment, enabling you to explore Red Hat OpenShift, using oVirt and OKD.</p> <p>This setup uses the simplest possible network configuration with a single physical workstation hosting the entire cluster.</p> <p>There are other online resources which explain how to set up a multi-machine hosted installation with more complex network setup.  I've included a few links in the resources section of this site.</p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>The following tools must be installed on your laptop or workstation</p>  <p>Todo</p> <p>Create pipeline tasks or devfile for Che workspaces so nothing needs to be done on a local workstation</p>  <ul> <li>Operator SDK</li> <li>Kustomize</li> <li>controller-gen</li> </ul>"},{"location":"my-setup/","title":"My setup","text":"<p>This page details the setup for my home lab</p>"},{"location":"my-setup/#hardware","title":"Hardware","text":"<p>There are 2 systems the make up the lab hardware:</p> <ul> <li>Raspberry Pi 4 for network services</li> <li>Refurbished HP Z840 Workstation for the main Lab system</li> </ul>"},{"location":"my-setup/#raspberry-pi-4","title":"Raspberry Pi 4","text":"<ul> <li>System : Raspberry Pi 4</li> <li>Memory : 8GB Memory</li> <li>Storage : 1TB SSD external disk connected via USB 3</li> </ul> <p>The Raspberry Pi provides the core network services needed for the Home lab.</p> <p>Many Internet Service Providers provide a home hub that will suffice for most home environments, but my hub doesn't provide the DHCP and DNS services I need to run my home lab, so I disabled the basic DHCP service offered by my ISP hub and setup a Raspberry Pi single board computer to provide the network services for my home network.</p> <p>Dnsmasq provides both DHCP and DNS services.  It is easy to setup and ideal for a home lab.  I run Dnsmasq on a raspberry Pi as part of my home network setup.</p>"},{"location":"my-setup/#hp-z840-workstation","title":"HP Z840 Workstation","text":"<ul> <li>System : Refurbished Z840 Workstation</li> <li>CPU   : 2 X Intel Xeon E5-2697 V4 2.30Ghz 18 Core CPUs</li> <li>Memory : 384GB</li> <li>Storage :<ul> <li>2TB SSD NVME M.2 - Boot disk</li> <li>4 x 6TB SATA 7200rpm Disks configured as 10.9 TB LSI RAID 10 volume</li> <li>2 X 2TB SATA SSDs configured as 3.64 TB LSI RAID 0 volume</li> </ul> </li> </ul> <p>The z840 is setup as a single node oVirt and Gluster Hyperconverged system.  The LSI RAID volumes are used exclusively as gluster volumes, so oVirt and OKD have access to both fast SSD and slower HD storage.</p> <p>The systems are connected with 1GB networking using unmanaged switches and cat 6 cables.</p>"},{"location":"my-setup/#network-setup","title":"Network setup","text":"<p>I run the lab environment on my home ethernet network, which is not exposed on the internet, so all the name resolution is entirely within my local LAN, so I've not purchased any domain for the home lab.</p> <ul> <li>Base domain name : lab.home</li> <li>OKD Cluster name : okd</li> <li>Network<ul> <li>IP Network : 192.168.1.x</li> <li>Netmask : 24 / 255.255.255.0</li> <li>Gateway : 192.168.1.1</li> <li>DNS : 192.168.1.10</li> <li>DHCP range : 192.168.1.100 - 192.168.1.249</li> </ul> </li> <li>OKD Cluster name : okd</li> </ul>"},{"location":"my-setup/#dns-mappings-on-local-network","title":"DNS mappings on local network","text":"IP Hostnames Description     192.168.1.10 raspihome raspihome.lab.home Raspberry pi host   192.168.1.11 z840 z840.lab.home z840 host   192.168.1.15 virt virt.lab.home oVirt hosted engine   192.168.1.16 workstation workstation.lab.home Fedora workstation   192.168.1.17 api api.okd.lab.home OKD api endpoint   192.168.1.18 *.apps.okd.lab.home OKD apps ingress endpoint"},{"location":"okd_install/","title":"OKD Install","text":"<p>When you have your oVirt environment up and running you can install OKD.</p>"},{"location":"okd_install/#preparing-required-information","title":"Preparing required information","text":"<p>To help with the installation here is a list of information you will need during the install:</p>    item description     Engine FQDN This is the Fully Qualified Domain Name of the virtual engine.  This is the value you entered in step 1 in oVirt setup section Install the Hosted Engine   Engine user This should be admin   Engine password This is the value entered at ovirt install time, and the password you use to access the ovirt admin console   oVirt Cluster name Should be Default.  This can be verified in the oVirt Administration console, select Compute from the side menu then Clusters.  By default there is a single cluster defined with Default as the name   Storage Domain Select the storage domain with fast storage, ideally Solid State Disk (SSD) should be used   Network Select the oVirt network to place the OKD cluster hosts on.  By default a single network named ovirtmgmt is created at oVirt install   IP address for the API endpoint for the OKD cluster The IP address on your network you previously allocated for the OKD cluster API Endpoint   IP address for the Ingress for the OKD cluster The IP address on your network you previously allocated for the OKD Cluster Ingress   OKD Cluster base domain The base domain your cluster will use for all exposed endpoints - This cannot be changed after installation   Cluster Name The name for the OKD cluster, this will be prepended to the base domain to form the URLs for application and API endpoints. (e.g. <code>api.&lt;cluster name&gt;.&lt;base domain&gt;</code>)   Enter a valid Red Hat pull secret This is the pull secret to the Red Hat image registries where Open Shift images are stored.  You don't need to use a valid pull secret as OKD does not need access to the registries, but providing a valid secret will allow Red Hat applications to be installed on the cluster.  The pull secret must pass a validation check.  A valid fake secret is <code>{\"auths\":{\"fake\":{\"auth\":\"aWQ6cGFzcwo=\"}}}</code>.  If you have a Red Hat account a valid secret can be downloaded from here.  Adding a valid pull secret will allow access to licensed Red Hat content, you need to ensure you comply with Red Hat entitlements if providing a valid secret     <p>Todo</p> <p>Add details of the required DNS config needed to allow the OKD setup to work</p>"},{"location":"okd_install/#install-okd","title":"Install OKD","text":"<p>Complete the following steps to install OKD on your cluster</p>"},{"location":"okd_install/#download-the-installer","title":"Download the installer","text":"<ul> <li>To find the latest version of the OKD installer, visit the releases page and download the latest openshift-install image for the platform where you plan to run the installer from (this is typically your local laptop, but could be a virtual machine you run on the ovirt cluster).</li> </ul> <p>Alternatively you can download one of the nightly builds.  These builds contain recent updates and fixes, but aren't an official release, so may contain unresolved issues.  Click on a build to get information about the build and also the command to download and unpack the build to your local system</p> <ul> <li>Expand the downloaded archive to allow access to the openshift-install binary, e.g. <code>tar zxvf openshift-install-mac-4.9.0-0.okd-2021-08-03-074139.tar.gz</code></li> </ul>"},{"location":"okd_install/#create-the-install-config","title":"Create the install config","text":"<ul> <li>Open a command or terminal window and switch to the directory containing the openshift-install binary</li> <li> <p>run command <code>./openshift-install create install-config</code>, and enter the values when prompted - these are the values you prepared at the top of this page.</p> <ul> <li>select oVirt as the Platform</li> <li>enter the engine Fully Qualified Domain Name</li> <li>accept the suggested engine username (admin@internal) by pressing enter</li> <li>enter the engine password</li> <li>accept the default Cluster name, which should be set as Default unless you have changed oVirt configuration</li> <li>select the appropriate storage domain to store the OKD cluster host disk images</li> <li>select the Network to use</li> <li>input IP address allocated to OKD cluster API endpoint</li> <li>input IP address allocated to OKD cluster Ingress</li> <li>input the base domain</li> <li>input the cluster name (forms the end of all URLs for cluster apps <code>apps.&lt;cluster name&gt;.&lt;basse domain&gt;</code>)</li> <li>input the pull secret (either a valid Red Hat or the fake one provided above)</li> </ul> </li> </ul>  <p>Warning</p> <p>There is a bug in the OVNKubernetes network provider in OKD 4.7.  This prevents the install working without manual intervention and prevents the detection of external IP addresses causing the worker Machines being stuck in Provisioning phase.  A work around is to use the OpenShiftSDN network provider.  </p> <p>To do this change the install-config.yaml file created in the previous steps and change the networkType property from OVNKubernetes to OpenShiftSDN</p> <pre><code>networking:\n    clusterNetwork:\n    - cidr: 10.128.0.0/14\n        hostPrefix: 23\n    machineNetwork:\n    - cidr: 10.0.0.0/16\n    networkType: OpenShiftSDN\n    serviceNetwork:\n    - 172.30.0.0/16\n</code></pre>   <p>Warning</p> <p>From OKD 4.8 the default install configuration now defines affinity groups.  If you do not have at least 3 physical oVirt hosts then you need to alter the install configuration to not enforce the affinity groups.</p> <p>To do this in the platform section at the bottom of the install-config.yaml file, set the enforcing property to false for the affinity groups:</p> <pre><code>platform:\n    ovirt:\n        affinityGroups:\n        - description: AffinityGroup for spreading each compute machine to a different\n            host\n        enforcing: false\n        name: compute\n        priority: 3\n        - description: AffinityGroup for spreading each control plane machine to a different\n            host\n        enforcing: false\n        name: controlplane\n        priority: 5\n</code></pre>"},{"location":"okd_install/#run-the-installer","title":"Run the installer","text":"<p>Note</p> <p>The default install will download the required content from the internet.  It is assumed that the machine running the openshift-install application and the machine hosting oVirt and the OKD cluster have a good internet connection to be able to download the required content.</p>  <ul> <li>create an install directory <code>mkdir install</code></li> <li>copy the configuration into the install directory - don't move it, copy it as it gets deleted during the install, so it is good to have a backup copy. <code>cp install-config.yaml install</code></li> <li>create the cluster with command <code>./openshift-install create cluster --dir=./install --log-level=info</code></li> <li>wait until the setup completes, this can take quite a while, 30-60 minutes is not uncommon</li> <li> <p>when the install completes you will see a message similar to this:</p> <pre><code>INFO Install complete!                            \nINFO To access the cluster as the system:admin user when using 'oc', run 'export KUBECONFIG=/Users/brian/projects/okd/4.7/install/auth/kubeconfig' \nINFO Access the OpenShift web-console here: https://console-openshift-console.apps.okd.lab.home \nINFO Login to the console with user: \"kubeadmin\", and password: \"xxxxx-xxxxx-xxxxx-xxxxx\"\n</code></pre> </li> </ul>  <p>Warning</p> <p>It is important that you keep the install directory after the installation has finished, as if you ever shut your cluster down for a length of time, then the certificates used within the system may expire whilst the system is down.  The only way to access the cluster to renew the certificates is with the auth credentials contained within the install directory.  You also need the install directory if you want to uninstall the cluster.</p>   <p>Info</p> <p>If you have a slower network connection it is possible that the install will timeout.  You can continue the install process if the install times out.  Depending on the place where it timeouts you can continue:</p> <ul> <li>Timeout during bootstrap : <code>./openshift-install wait-for bootstrap-complete</code><ul> <li>once bootstrap completes run command : <code>./openshift-install destroy bootstrap</code> to clean up the bootstrap vm</li> <li>the run the command to wait for the remaining install <code>./openshift-install wait-for install-complete</code></li> </ul> </li> <li>Timeout after bootstrap completes, waiting for cluster to initialize run command : <code>./openshift-install wait-for install-complete</code></li> </ul>"},{"location":"okd_install/#connecting-to-the-cluster","title":"Connecting to the cluster","text":"<p>Now your cluster has been installed you want to be able to access it.  There are 2 ways to access it:</p> <ul> <li>Web Console</li> <li>Command line</li> </ul>"},{"location":"okd_install/#web-ui","title":"Web UI","text":"<p>After installation your cluster web console should be accessible at the URL displayed when the openshift-install command completes.  The URL is  of the form <code>https://console-openshift-console.apps.&lt;cluster name&gt;.&lt;base domain&gt;</code>.</p> <p>You can use the kubeadmin command, with the password displayed when the openshift-install command completed.  This is the temporary cluster admin account.  You should add an identity provider and create your own admin account.   Instructions to complete this task are provided below.</p>"},{"location":"okd_install/#command-lined","title":"Command lined","text":"<p>You can access the cluster from the command line using the oc command line tool.  Please ensure the version of OC is up to date.  The correct version of oc for your cluster can be downloaded from the web console.  Select the question mark (?) icon next to your user name in the top menu, then select Command line tools from the menu.  Then you can select the appropriate binary version of the tool for your operating system.</p> <p>Once you have the oc tool install you can connect to the cluster.  There are 2 ways to connect to the cluster:</p>"},{"location":"okd_install/#connecting-using-the-kubeconfig-file","title":"Connecting using the kubeconfig file","text":"<p>During installation a kubeconfig file was created.  This content needs to be kept safe, as it can be the only way o log in if the cluster has been shutdown for a while and certificates have expired.  It also provides an admin login.  To use the file set the environment variable KUBECONFIG to point to the config file.  The location was provided as part of the openshift-install completion message, such as :</p> <pre><code>export KUBECONFIG=/Users/brian/projects/okd/4.7/install/auth/kubeconfig\n</code></pre> <p>you can now use the oc command and be connected as an administrator.</p>"},{"location":"okd_install/#connect-as-a-specific-user","title":"Connect as a specific user","text":"<p>You can specify a user on the command line.  Ensure the KUBECONFIG environment variable is not set, then login using:</p> <pre><code>oc login -u &lt;user&gt; --server=https://api.&lt;cluster name&gt;.&lt;base domain&gt;:6443\n</code></pre> <p>If you are logged into the web console as the user you wish to use on the command line, then you can get the login command using the drop down menu shown when you click your username in the top menu.  Select Copy login command from the menu, you will be prompted for your password, then you can select Display Token to see a login command.  This uses a generated token rather than your username and password.</p>"},{"location":"okd_install/#post-install-tasks","title":"Post install tasks","text":"<p>Info</p> <p>If you are getting warnings that your cluster is unable to retrieve available updates because <code>https://origin-release.svc.ci.openshift.org</code> host cannot be found, then you have an out of date URL in the update service.  You can fix this by running the following command as an admin user on the command line:</p> <pre><code>oc patch clusterversion/version --patch '{\"spec\":{\"upstream\":\"https://amd64.origin.releases.ci.openshift.org/graph\"}}' --type=merge\n</code></pre>"},{"location":"okd_install/#adding-an-identity-provider","title":"Adding an Identity provider","text":"<p>You need a system to authenticate users to the system.  OKD supports a number of different options for authenticating users.  Here we will use the basic htpasswd authentication method, which is a simple list of users with encrypted passwords, held in a Kubernetes secrets object.  Details of other authentication methods can be found in the OKD documentation</p> <p>Full instructions for the HTPasswd identity provider can be found in the OKD documentation</p>"},{"location":"okd_install/#creating-the-users-and-passwords","title":"Creating the users and passwords","text":"<p>You need access to the htpasswd utility.  This comes with most Linux distributions and MacOS.  Windows users may need to get it from an apache HTTP server distribution.</p> <p>Create the user file and add the first user with command:</p> <pre><code>htpasswd -c -B -b users.htpasswd &lt;user_name&gt; &lt;password&gt;\n</code></pre> <p>the file users.htpasswd will be created in the current directory.</p> <p>Add additional users with command (this command expects to find file users.htpasswd in the current working directory):</p> <pre><code>htpasswd -B -b users.htpasswd &lt;user_name&gt; &lt;password&gt;\n</code></pre>"},{"location":"okd_install/#creating-the-secret-from-the-users-file","title":"Creating the secret from the users file","text":"<p>Once you have the users.htpasswd file created and populated with all the users you want on to be able to access the system, then you need to create a secret from the file with command (this command expects to find the users.htpasswd file in the current working directory):</p> <pre><code>oc create secret generic htpass-secret --from-file=htpasswd=users.htpasswd -n openshift-config\n</code></pre>"},{"location":"okd_install/#creating-identity-provider-configuration","title":"Creating identity provider configuration","text":"<p>You can now create the identity provider using command:</p> Linux &amp; Mac OS <pre><code>cat &lt;&lt;EOF | kubectl apply -f -\napiVersion: config.openshift.io/v1\nkind: OAuth\nmetadata:\n  name: cluster\nspec:\n  identityProviders:\n  - name: my_htpasswd_provider\n    mappingMethod: claim\n    type: HTPasswd\n    htpasswd:\n      fileData:\n        name: htpass-secret\nEOF\n</code></pre>  Windows  <p>Todo</p> <p>Add Windows equiv of the command</p>"},{"location":"okd_install/#creating-an-administrator-account","title":"Creating an administrator account","text":"<p>After adding the identity provider, you want to make one of the accounts added to the identity provider an administrator user.  </p> <p>Before proceeding you should log into the cluster from the Web Console, using the user account you want to make an admin user.</p> <p>On the command line you can make the user an admin user with the following command (replacing  with a valid user name created for your configured identity provider): <pre><code>oc adm policy add-cluster-role-to-user cluster-admin &lt;user&gt;\n</code></pre>"},{"location":"okd_install/#remove-the-kubeadmin-user","title":"Remove the kubeadmin user","text":"<p>The kubeadmin user is created during installation and should only be thought of as a temporary users.  Once you have configured an identity provider and made at least one of the users an administrator on the cluster then the kubeadmin user account can be removed.  Use the following command to remove the user:</p> <pre><code>oc delete secrets kubeadmin -n kube-system\n</code></pre>"},{"location":"overview/","title":"Overview","text":"<p>Getting skills in Cloud Native Development and maintaining those skills can be challenging for a developer.  The technology is evolving very quickly, so having an environment where a developer can update,  explore and learn new features as they emerge is a valuable resource.</p> <p>Managed cloud based environments are usually a shared resource across a development team, where it is not appropriate to upgrade to the latest emerging technology. as the development environment needs to be a managed, stable environment.</p> <p>Costs can also be an inhibitor to allow developers to have the environments they want to explore and keep up to date, especially when doing so at home.</p> <p>This project documents my cloud native development home lab.  I wanted to only use freely available open source technology, but also technology where there is a route into a production environment.</p> <p>Although the project doesn't use any managed cloud resources, it does require a certain amount of hardware - which may not be appropriate for all developers.  I purchased a reconditioned workstation with a large amount of memory and Intel Xeon processors, to have sufficient hardware resources to run a cloud environment.  This environment will not run on a typical home computer.</p> <p>If you don't have sufficient hardware resources to install a home lab environment, then CodeReady Containers (CRC) may be a solution, as this will run on a laptop or workstation with at least 16GB memory.  There are 2 versions of CRC available, the OpenShift version and the version built on top of OKD</p> <p>This project creates a home lab environment based on 2 primary open source projects :</p> <ul> <li>oVirt - which is an upstream community run project contributing in to Red Hat Virtualization</li> <li>OKD - which is a community run sibling project to Red Hat OpenShift, taking the same source code as a starting point, then applying some customisations to create the deliverables.</li> </ul>"},{"location":"overview/#ovirt","title":"oVirt","text":"<p>oVirt is an open-source virtualization solution based on the KVM hypervisor.  It offers an open-source solution similar to the enterprise products from VMWare, to run a distributed, virtualization solution.  </p> <p>In this project, the setup will focus on a home lab deployment, using only a single oVirt host.  However, if required larger configurations could be used.</p>"},{"location":"overview/#okd","title":"OKD","text":"<p>OKD is an open-source distribution of Kubernetes, that delivers enhanced capabilities over a standard Kubernetes platform.  With additional security features and an integrated user interface with both admin and developer features.</p>"},{"location":"ovirt/","title":"oVirt installation and setup","text":""},{"location":"ovirt/#install-ovirt-node","title":"Install oVirt node","text":"<ul> <li>download ISO.  You want the oVirt Node ISO.</li> <li>flash to USB memory stick</li> <li>Boot from memory stick</li> </ul>"},{"location":"ovirt/#run-ovirt-setup-wizard","title":"Run oVirt setup wizard","text":"<ol> <li>Select language from the list then press the Continue button</li> <li>Select the keyboard layout then press the Done key</li> <li>Enter the Installation Destination section<ul> <li>you need to keep a disk or partition free for Gluster to use (this was discussed in the preparation section)</li> </ul> </li> <li>Enter a root password</li> <li>Set the TimeZone</li> <li>Enter the Network and Host name section (ovirt host details - z840.home.lab in my setup)<ul> <li>select Configure to configure the network interface</li> <li>In the IPv4 tab select Manual configuration then select Add to enter the configuration - this should match what is in your DNS configuration.  Press Save to store the IP configuration</li> <li>Click the toggle switch to enable the Ethernet interface</li> <li>Select Done to complete the network configuration</li> </ul> </li> <li>(optional) If you want to configure NTP time synchronisation, revisit the Time &amp; Date section and configure the NTP server to a local server then enable NTP</li> <li>Select Begin Installation to start the installation</li> <li>Wait for installation to complete then select to reboot when selected (ensure the USB memory stick is removed so it doesn't boot from the install media)</li> <li>You can now interact with the installed system using the web based cockpit UI.  On your laptop or a workstation on the network, navigate to <code>https://&lt;host address&gt;:9090</code>.  Where the host address is the address you added in DNS for the IP address you manually configured in step 6 above.</li> </ol>"},{"location":"ovirt/#optional-create-partition-for-gluster-filesystem","title":"(Optional) Create partition for Gluster filesystem","text":"<p>If you are using a disk partition for the Gluster FS, then you need to create the partition.  In the cockpit UI, navigate to the Storage section.  Select the disk where the partition will live from the side panel.  This will show the partitions in the Content section.  Next to the unallocated space there is a Create partition button.  Click the button to create a partition.  Set the required size and select No filesystem as the type then click Create partition  to create the partition.</p>"},{"location":"ovirt/#setup-ssh-keys","title":"Setup ssh keys","text":"<p>During the install the ansible scripts need to be able to execute commands on the host.  To do this it uses passwordless ssh.  Even though we are only using a single host, the scripts are written to work across multiple hosts, so we need to enable passwordless ssh.</p> <p>You need to know your host IP address to substitute into <code>ssh-copy-id</code> command.  You can find your host address using command <code>hostname -I</code></p> <p>Enter the following commands using the terminal section of the cockpit web console (<code>http://&lt;host-address&gt;:9090</code>) for the oVirt host.  Substitute your host address in the copy command, accept all defaults and leave the passphrase blank:</p> <pre><code>ssh-keygen\nssh-copy-id root@&lt;host-address&gt;\n</code></pre> <p>you will be prompted to confirm the connection, answer yes then you will be prompted for the root password, which you entered in step 4 of the previous section.</p>"},{"location":"ovirt/#configure-lvm-filter","title":"Configure LVM filter","text":"<p>By default Logical Volumes are configured to specific devices, so you need to add the device you want to use for the Gluster storage.</p> <p>Using the terminal section in the cockpit web ui, edit file /etc/lvm/lvm.conf and search for a line the starts filter =, not lines starting with # are comments.</p> <p>Modify the line to include your chosen device for the gluster volumes,</p> <p>eg.  If the filter is currently set to <code>filter = [\"a|^/dev/disk/by-id/lvm-pv-uuid-U77HZ9-LPry-OOMY-bgOq-t34w-l3av-srg8tU$|\", \"r|.*|\"]</code> and your chosen device is /dev/sdb, then the filter line needs to be modified to:</p> <pre><code>filter = [\"a|^/dev/disk/by-id/lvm-pv-uuid-U77HZ9-LPry-OOMY-bgOq-t34w-l3av-srg8tU$|\", \"a|^/dev/sdb|\", \"r|.*|\"]\n</code></pre> <p>Save the modified lvm.conf file</p>  <p>Note</p> <p>If you plan to use an entire disk for GlusterFS, then it is important that the disk is not partitioned, so if it has previously been used and has a partition table on it, then use the Terminal section of the cockpit interface to clear the device.  E.g. if you will be using the disk /dev/sdb for gluster, then wipe the disk using command <code>wipefs -a -f /dev/sdb</code>.  This will erase the disk.</p>"},{"location":"ovirt/#setup-the-hyperconverged-ovirt-hosted-engine-and-gluster-storage","title":"Setup the hyperconverged oVirt Hosted Engine and Gluster storage","text":"<p>The hyperconverged Hosted Engine and Gluster storage can be installed using the cockpit web console (<code>http://&lt;host-address&gt;:9090</code>).</p> <p>In the Cockpit UI navigate to the Virtualization section in the side menu, then select the Hosted Engine section.</p>  <p>Select the start button under Hyperconverged.</p> <p>Select the Run Gluster Wizard for Single Node option to start the install.</p>  <p>Note</p> <p>Step 5 is only required in oVirt versions 4.4.6 and earlier, from 4.4.7 the installer works without needing to modify the generated config</p>  <ol> <li>Enter the Fully qualified hostname for the oVirt cluster (this should be the name of the oVirt node that was used during the <code>ssh-copy-id</code> command)</li> <li>You can leave the Packages options as default</li> <li>You can leave the Volumes options as default.  However, if you have a small amount of storage you may want to delete 2 of the 3 default volumes, so all available storage will be in a single volume.</li> <li>In the Bricks options, set the device to the device you have available for the gluster storage for all the configured volumes.  This could be an entire disk (e.g. /dev/sdb), or an available disk partition (/dev/sda3)</li> <li>(only for earlier versions of oVirt) In the review section edit the summary and remove the line <code>- 5900/tcp</code>, as this will cause the scripts to fail. Save the script</li> <li>Select the Deploy button to start the Gluster Storage installation</li> </ol> <p>If all works you should see the screen confirming the Gluster installation was successful</p>  <p>You can now select the Continue to Hosted Engine Deployment button to install the Hosted Engine.</p>"},{"location":"ovirt/#install-hosted-engine","title":"Install Hosted Engine","text":"<p>The Hosted Engine will try to add port 6900 to the public zone and will fail as the port is already being exposed.  Before installing the Hosted Engine you need to modify the firewall configuration.</p>"},{"location":"ovirt/#modify-the-firewall-rules","title":"Modify the firewall rules","text":"<p>Info</p> <p>This step was needed in versions of ovirt before 4.4.9, but is no longer needed with 4.4.10</p>  <p>You need to modify the firewall config to remove port 6900 to ensure the automated deployment will work.</p> <ol> <li> <p>Switch to the terminal section and edit the file /etc/firewalld/zones/public.xml to have the following content:</p> <pre><code>&lt;zone&gt;\n  &lt;short&gt;Public&lt;/short&gt;\n  &lt;description&gt;For use in public areas. You do not trust the other computers on networks to not harm your computer. Only selected incoming connections are accepted.&lt;/description&gt;\n  &lt;service name=\"ssh\"/&gt;\n  &lt;service name=\"dhcpv6-client\"/&gt;\n  &lt;service name=\"cockpit\"/&gt;\n  &lt;service name=\"libvirt\"/&gt;\n  &lt;service name=\"libvirt-tls\"/&gt;\n  &lt;service name=\"glusterfs\"/&gt;\n  &lt;service name=\"custom-vdsm\"/&gt;\n  &lt;port port=\"2049\" protocol=\"tcp\"/&gt;\n  &lt;port port=\"54321\" protocol=\"tcp\"/&gt;\n  &lt;port port=\"5900-6899\" protocol=\"tcp\"/&gt;\n  &lt;port port=\"6901-6923\" protocol=\"tcp\"/&gt;\n  &lt;port port=\"5666\" protocol=\"tcp\"/&gt;\n  &lt;port port=\"16514\" protocol=\"tcp\"/&gt;\n&lt;/zone&gt;\n</code></pre> <p>You can see the port range 5900-6923 has been split into 2 ranges avoiding port 6900</p> </li> <li> <p>run command <code>systemctl restart firewalld</code> to make the new firewall configuration live.  You can now return to the Virtualization section of the Cockpit web console to continue with the Hosted Engine deployment.</p> </li> </ol>"},{"location":"ovirt/#install-the-hosted-engine","title":"Install the Hosted Engine","text":"<p>Select to Deploy the Hosted Engine</p> <ol> <li>In the VM Settings section enter:<ul> <li>the fully qualified host name for the hosted engine (virt.home.lab in my setup)</li> <li>switch to static Network Configuration and set the IP address to the value matching your hostname in your DNS, the gateway address and DNS server address</li> <li>enter the root password you want to set for the hosted engine operating system</li> <li>select Next to move to Engine section</li> </ul> </li> <li>In the Engine section enter the admin password you want to set for the Engine, then select **Next to move to the next section</li> <li>Review the configuration information then press Prepare VM to deploy the Hosted Engine virtual machine in the Prepare VM section, this can take a while</li> <li>When the VM has been setup press Next to complete the setup</li> <li>In the storage section the settings should be pre-populated, so you can press Next then Finish Deployment</li> </ol>"},{"location":"ovirt/#setup-console-viewing-app","title":"Setup Console viewing app","text":"<p>oVirt uses the SPICE protocol to access a hosted virtual machine.  You need to have a console viewing application installed on your system.  Details can be found here</p>"},{"location":"ovirt/#ovirt-machine-console-on-macos","title":"oVirt machine console on macOS","text":"<p>Setting up the console viewer on MacOS can be a little more involved.  </p> <p>When using Homebrew, issue the following commands on the command line:</p> <ul> <li>brew install gtk+3</li> <li>brew tap jeffreywildman/homebrew-virt-manager</li> <li>brew install remoteviewer</li> </ul> <p>then follow the instructions to setup the association of .vv files to the remote-viewer application.</p>"},{"location":"preparation/","title":"Getting ready for the installation","text":"<p>Before starting to install oVirt and OKD you need to ensure you have the necessary environment available.  This includes:</p> <ul> <li>Having sufficient compute, memory and storage available for the cluster</li> <li>Having the required networking infrastructure and services available and configured</li> </ul>"},{"location":"preparation/#hardware-requirements","title":"Hardware requirements","text":"<p>The OKD documentation describes an OKD production environment on oVirt, which specifies hardware requirements of:</p> <ul> <li>Minimum 28 vCPUs</li> <li>112 GiB RAM</li> <li>min 230 GiB storage (non-prod) or 840 GiB (prod)</li> </ul> <p>The documentation also assumes that oVirt will be installed over multiple physical hosts, to provide a more resilient environment.  However, for this home lab setup a single machine will be used.</p> <p>However, for a Home Lab environment the oVirt environment can be configured to over commit memory, to allow a cluster to be setup with a minimum of 56 GiB memory, but then you will be constrained on what you can deploy into the cluster.</p>  <p>Todo</p> <p>When SNO docs is available fix </p>  <p>There is also the option to not deploy a fault tolerant OKD cluster and reduce the number of Master nodes, details of how to create a single node installation can be found in the <code>[OKD documentation](https://docs.okd.io/latest/installing/installing_sno/install-sno-preparing-to-install-sno.html){target=_blank}</code>, which needs 8 vCPU cores and 32GB RAM.  An alternate option may be to use Code-Ready Containers</p>"},{"location":"preparation/#storage-setup","title":"Storage setup","text":"<p>A fault tolerant version of OKD needs fast storage to keep the nodes synchronised via the etcd key-value store.  Traditional spinning disks are not fast enough for this purpose so Solid State Drives (SSD) are needed to host the system nodes.</p> <p>oVirt includes glusterfs to provide host storage to the virtual machines.  The SSD storage needs to be exposed via gluster so oVirt can use it as the storage for the OKD cluster nodes</p>"},{"location":"preparation/#network-requirements","title":"Network Requirements","text":"<p>To run oVirt and OKD you need some local network infrastructure to provide:</p> <ul> <li>DHCP IP allocation</li> <li> <p>DNS name resolution</p> </li> <li> <p>each physical host you will use to host the oVirt nodes will need an IP address</p> </li> <li>the oVirt virtualization manager VM will need an IP address, with DNS resolution on the local network</li> <li>OKD needs 2 IP addresses allocated for the API endpoint and the cluster ingress, again DNS resolution is needed for the 2 IP addresses</li> <li>the local network DNS resolution must be configured to resolve certain FQDN (Fully Qualified Domain Name).  This includes resolving all names matching  <code>*.apps.&lt;cluster-name&gt;.&lt;base-domain&gt;</code>, which will resolve all deployed application on OKD exposed using the ingress.</li> </ul>"},{"location":"resources/","title":"Additional Resources","text":"<p>Below are some links and posts about OKD.  They may provide additional insight and options to help your OKD learning.</p>"},{"location":"resources/#community-locations","title":"Community locations","text":"<ul> <li>OKD main site</li> <li>OKD git repo</li> <li>OKD git community repo</li> </ul>"},{"location":"resources/#installation-and-setup-help","title":"Installation and setup help","text":"<ul> <li>Craig Robinson - Installing an OKD 4.5 Cluster</li> <li>Ross Brigoli - Running OpenShift at Home</li> <li>Josphat Mutal - How to Setup Local OpenShift Origin (OKD) Cluster on CentOS 7</li> <li>Oren Oichman - Deploy OKD in a disconnected (Air Gap) Environment</li> <li>Josphat Mutal - How to install OKD OpenShift 4.7 Cluster on OpenStack</li> </ul>"},{"location":"resources/#okd-4-additional-content","title":"OKD 4 additional content","text":"<ul> <li>OKD 4 Testing and Deployment Workshop - Videos and Additional Resources</li> <li>OKD 4 blogs on OpenShift Blog site</li> </ul>"},{"location":"workstation/","title":"Hosted workstation","text":"<p>It can be convenient to have a workstation image running on oVirt that you can remote in to.  This workstation will run the latest fedora workstation, which at the time of writing this is fedora 35 (Fedora-Workstation-Live-x86_64-35-1.2.iso)</p> <ul> <li>Download iso</li> <li> <p>upload to oVirt storage</p> <ul> <li>From the ovirt Administration Portal, goto the Storage -&gt; Disks section, then select Upload then Start from the top menu</li> <li>Choose the fedora iso file to upload, then select the storage domain to store the file in and press OK to start the upload</li> <li>wait for the upload to complete</li> </ul> </li> </ul>"},{"location":"devops/","title":"DevOps environment","text":"<p>After setting up OKD cluster additional components will be installed to create a Cloud Native Development environment.  The components that will be installed are:</p> <ul> <li>Noobaa (Object storage)</li> <li>Project Quay (Container Repository)</li> <li>GitOps (ArgoCD)</li> <li>Tekton (OpenShift Pipelines)</li> <li>Gitea (Source control)</li> <li>Web Terminal</li> <li>Che (CodeReady Workspaces)</li> </ul>"},{"location":"devops/argocd/","title":"ArgoCD","text":"<p>Argo CD is a GitOps continuous delivery tool for Kubernetes.  It allows you to declaratively define kubernetes and application configuration in a source code management tool and will ensure ensure the cluster remains in sync with the declared desired state.</p>"},{"location":"devops/argocd/#installation","title":"Installation","text":"<p>ArgoCD is in the community operator catalog, so can be easily installed.  Install the operator, accepting all the defaults.</p> <p>When the operator is installed, create an ArgoCD instance accepting all defaults.</p>"},{"location":"devops/argocd/#accessing-argocd","title":"Accessing ArgoCD","text":"<p>In the ArgoCD overview panel of the deployed instance (Installed Operators -&gt; ArgoCD (ensure All Projects is the active project) -&gt; ArgoCD -&gt; select your instance) you will see the project that your ArgoCD instance is installed in (default should be openshift-operators).</p> <ul> <li>Switch to the project that ArgoCD is installed in</li> <li>open the secrets panel (Workloads -&gt; Secrets) and find the secret <code>&lt;ArgoCD instance name&gt;-cluster</code>.  This secret contains the admin password for your ArgoCD instance.</li> <li>The URL for the cluster can be found in the routes (Networking -&gt; Routes)</li> </ul>"},{"location":"devops/gitea/","title":"Gitea","text":"<p>Gitea is an opensource git server that will be used to provide a local git server.</p> <p>There is a RedHat provided operator available as an Operator Hub catalog source on GitHub, however, this will not work on OKD as it relies on a container registry.redhat.io/openshift4/ose-kube-rbac-proxy, which requires an OpenShift pull secret to access.</p> <p>An kube RBAC proxy is available here : https://github.com/brancz/kube-rbac-proxy - is this an equivalent replacement?  Container is available also here</p>"},{"location":"devops/objectStorage/","title":"Object Storage","text":"<p>Object storage is a popular storage technology on cloud, with all major cloud providers offering an Object Storage service.  The Amazon Web Services S3 API has become the de facto API to use to access Object Service.</p> <p>noobaa is an Open Source project that offers AWS S3 compatibility and offers a private cloud Object Storage capability with the ability to aggregate private and public object storage services.</p>"},{"location":"devops/objectStorage/#installing-noobaa","title":"Installing noobaa","text":"<p>Installing noobaa on OKD is simple, using the NooBaa Operator.  Simply follow the instructions in the project README</p>  <p>Todo</p> <p>Are there Windows instructions or should Windows users use the Windows Linux integration?</p>"},{"location":"devops/objectStorage/#managing-noobaa","title":"Managing noobaa","text":"<p>Once noobaa is installed you can access the management console and the S3 API.  To get the URLs you can use the OKD command line <code>oc get routes -n noobaa</code> or the noobaa command line <code>noobaa status</code> or use the web console to look at the routes in the noobaa project</p>  <p>Note</p> <p>The noobaa management console only runs in the Chrome browser</p>  <p>To log into the management console you can use the details from the noobaa-admin secret in the noobaa project.  Once logged onto the management console you can create your own user account and create buckets, backing stores or add other public cloud providers</p>"},{"location":"devops/pipelines/","title":"Pipelines","text":"<p>Tekton is the upstream project for OpenShift Pipelines.  </p> <p>The upstream project includes the integration with the OpenShift and OKD consoles, however the upstream project doesn't include the cluster wide tasks that are included in the OpenShift Pipelines operator.</p>"},{"location":"devops/pipelines/#installing-tekton","title":"Installing Tekton","text":"<p>The OpenShift operator is not available in the community hub, but the Tekton site includes install instructions for Tekton</p>"},{"location":"devops/pipelines/#tekton-hub","title":"Tekton Hub","text":"<p>There is a community hub of tasks available, which is the source of the content installed by the OpenShift Pipelines operator.  The hub allows you to search for tasks then provides the command to install the task to your cluster.</p>"},{"location":"devops/registry/","title":"Container Registry","text":"<p>There are many public containers registries available with dockerhub being the most popular.  However, dockerhub as download limits which can cause issues for home lab environments.  Without a paid subscription dockerhub can limit the number of daily container pulls from a single IP address, which can prevent a Kubernetes platform from accessing images.</p> <p>To overcome the dockerhub limits a local container registry will be setup that also provides a pull through cache, so containers on public registries can be fetched from the public and cached and served from the local registry to overcome the daily limit.  It also provides local registry functionality rather than having to push images to a public registry for development projects.</p> <p>Project Quay is a community distribution of RedHat Quay.  It provides a fully functional container registry with build in scanning using Clair and a pull through cache (from version 3.7)</p>"},{"location":"devops/registry/#installing-project-quay","title":"Installing project Quay","text":"<p>The OperatorHub installed in OKD contains the community Project Quay operator, which will install Project Quay in your OKD cluster.</p> <p>Install the Project Quay operator and wait for it to be ready (accept all the default settings), then from the Installed Operators panel in the OKD web UI select the Quay operator then switch to the Quay Registry tab.</p> <p>Select the *Create Quay Registry button then :</p> <ul> <li>give the registry a name</li> <li>Expand the Advanced configuration section, then the Components section<ul> <li>remove the tick from the managed checkbox for the objectstorage service</li> </ul> </li> <li>press the create button to start the Quay registry creation</li> </ul> <p>The Quay registry will not complete at this stage as there is some configuration missing.</p> <p>The operator uses a secret to control the configuration of the registry.  </p> <p>Open the Quay Registry entry (in the Installed Operators -&gt; Quay operator -&gt; Quay Registry section of the OKD UI).  You will see a link to the configuration secret displayed.  Select it to open the secret then press the Reveal values link to show the configuration document.  </p> <p>You need to change the secret to:</p> <ul> <li>include the object storage config (covered in the next section)</li> <li>turn on the caching feature (which is disabled by default in Project Quay 3.7) by adding <code>FEATURE_PROXY_CACHE: true</code> to the config secret</li> <li>give admin access to a user (covered in later section)</li> </ul>"},{"location":"devops/registry/#configuring-quay-storage","title":"Configuring Quay storage","text":"<p>Quay uses ObjectStorage so will use the noobaa installation installation.  In the noobaa management console login and select the Buckets icon from the side menu, then create a new bucket for use by quay.  </p> <p>Whilst in the noobaa management console, select the Overview icon from the side menu then the Connect Application button.  This will display a window containing the connection details needed to communicate with noobaa.  If you have created multiple accounts you can use the Target Account field to select the account to connect as.  You will need the connection settings in the next step.</p> <p>Add the Object Store configuration to the Quay configuration secret:</p> <pre><code>DISTRIBUTED_STORAGE_CONFIG:\n    local_us:\n        - RHOCSStorage\n        - access_key: &lt;access key&gt;\n          bucket_name: &lt;bucket name&gt;\n          hostname: &lt;hostname&gt;\n          is_secure: false\n          port: \"80\"\n          secret_key: &lt;secret key&gt;\n          storage_path: /datastorage/registry\n</code></pre> <p>where:</p> <ul> <li><code>&lt;access key&gt;</code> is the access key from the noobaa connection details</li> <li><code>&lt;bucket name&gt;</code> is the storage bucket created for quay to use</li> <li><code>&lt;hostname&gt;</code> is the S3 API endpoint for noobaa.</li> <li><code>&lt;secret key&gt;</code> is the secret key from the noobaa connection details</li> </ul>"},{"location":"devops/registry/#configuration-secret","title":"Configuration secret","text":"<p>The Project Quay documentation has more details about the configuration secret, but your secret should look something like this:</p> <pre><code>ALLOW_PULLS_WITHOUT_STRICT_LOGGING: false\nAUTHENTICATION_TYPE: Database\nDEFAULT_TAG_EXPIRATION: 2w\nDISTRIBUTED_STORAGE_CONFIG:\n    local_us:\n        - RHOCSStorage\n        - access_key: xxxx\n          bucket_name: lab-quay\n          hostname: s3-noobaa.apps.xxxxxx\n          is_secure: false\n          port: \"80\"\n          secret_key: xxxx\n          storage_path: /datastorage/registry\nENTERPRISE_LOGO_URL: /static/img/quay-horizontal-color.svg\nFEATURE_BUILD_SUPPORT: true\nFEATURE_PROXY_CACHE: true\nFEATURE_DIRECT_LOGIN: true\nFEATURE_MAILING: false\nREGISTRY_TITLE: Quay\nREGISTRY_TITLE_SHORT: Quay\nSETUP_COMPLETE: true\nSUPER_USERS:\n- brian\nTAG_EXPIRATION_OPTIONS:\n- 2w\nTEAM_RESYNC_STALE_TIME: 60m\nTESTING: false\n</code></pre> <p>You will see there is a section for SUPER_USERS.  Entries in this section define which users have access to the Admin Panel.  You need to create the user first.</p> <p>Once you have edited the secret (either using the OKD Web UI or from the command line) your ProjectQuay instance should complete, which will allow you to access the Project Quay web UI.</p> <p>Get the URL by looking at the Routes in the networking section of the OKD Web UI in project openshift-operators or by using the OKD command line <code>oc get routes -n openshift-operators</code>.  There are 2 or 3 endpoints associated with quay:</p> <ul> <li>the main UI (<code>&lt;registry name&gt;-quay-openshift-operators.apps.&lt;cluster base domain&gt;</code>)</li> <li>the builder (if this feature is enabled - <code>&lt;registry name&gt;-quay-builder-openshift-operators.apps.&lt;cluster base domain&gt;</code>)</li> <li>the config editor (<code>&lt;registry name&gt;-quay-config-editor-openshift-operators.apps.&lt;cluster base domain&gt;</code>)</li> </ul> <p>Open the main UI URL.  This will present the login screen for Quay, which also allows you to create an account.  If you want the account to have admin privileges add the username to the SUPER_USERS section of the config secret.</p>"},{"location":"devops/storage/","title":"Storage","text":"<p>Rook and Ceph provide storage service for OKD</p> <p>Repo : https://github.com/red-hat-storage/ocs-operator.git</p>"},{"location":"full-stack/nuxt3/","title":"Nuxt 3 - Vue based Web Framework","text":"<p>Nuxt is a web framework build on Vue.js.  It provides a number of features which speeds up development over standard Vue.js.</p> <p>Technology used for full stack development</p>"},{"location":"full-stack/nuxt3/#front-end-technology-stack","title":"Front end technology stack","text":"Technology Purpose     nuxt 3 Vue.js based framework   vite Frontend tooling   vitest Test framework (jest compatible)   pinia Vue store for state management   vuetify Vue component framework   VueUse Collection of Vue Composition utilities"},{"location":"full-stack/nuxt3/#front-end-project-start-and-config","title":"Front end project start and config","text":"<ol> <li><code>npx nuxi init test-project</code></li> <li><code>cd test-project</code></li> <li><code>npm install</code></li> </ol>"},{"location":"full-stack/nuxt3/#integrate-vuetify-in-the-project","title":"Integrate Vuetify in the project","text":"<ol> <li><code>npm install vuetify@next @mdi/font sass</code></li> <li>start code editor (<code>code ,</code>)</li> <li>create a folder in the project root named plugins</li> <li> <p>create a file in the plugins folder named vuetify.ts with the following content:</p> <p><pre><code>// plugins/vuetify.ts\nimport { createVuetify } from 'vuetify'\nimport * as components from 'vuetify/components'\nimport * as directives from 'vuetify/directives'\n\nexport default defineNuxtPlugin(nuxtApp =&gt; {\nconst vuetify = createVuetify({\n    components,\n    directives,\n})\n\nnuxtApp.vueApp.use(vuetify)\n})\n</code></pre> 5. modify the nuxi.config.ts file to integrated Vuetify into the Nuxt build process, update the defineNuxtConfig object definition so it looks like:</p> <pre><code>export default defineNuxtConfig({\n    css: [\n            'vuetify/lib/styles/main.sass',\n            '@mdi/font/css/materialdesignicons.min.css'\n        ],\n    build: {\n    transpile: ['vuetify'],\n    },\n    vite: {\n    define: {\n        'process.env.DEBUG': false,\n    },\n    },\n})\n</code></pre> </li> </ol>"},{"location":"full-stack/nuxt3/#add-vueuse-utilities","title":"Add VueUse utilities","text":"<ol> <li><code>npm i -D @vueuse/nuxt</code></li> <li> <p>Edit the nuxt.config.ts file and add the @vueuse/nuxt module:</p> <pre><code>export default defineNuxtConfig({\n    modules: [\n        '@vueuse/nuxt'\n    ],\n    ...\n})\n</code></pre> </li> </ol>"},{"location":"full-stack/nuxt3/#add-test-tooling","title":"Add test tooling","text":"<ol> <li><code>npm i -D vitest @vue/test-utils@next @vitest/coverage-c8 @vitest/ui</code></li> <li> <p>Update package.json to add test runner commands.  In the scripts section add the following lines:</p> <pre><code>...\n\"scripts\": {\n    \"test\": \"vitest\",\n    \"coverage\": \"vitest run --coverage\",\n    \"test-watch\": \"vitest -w --ui --open --coverage\",\n    ...\n},\n...    \n}\n</code></pre> </li> </ol>"}]}